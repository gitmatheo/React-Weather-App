{"version":3,"sources":["img/bg.jpg","svg/logo.svg","components/Form.js","components/Results.js","components/HeroImage.js","components/Loader.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MyForm","styled","form","_templateObject","Button","button","_templateObject2","Input","input","_templateObject3","Form","props","react_default","a","createElement","onSubmit","submit","className","type","value","placeholder","onChange","change","Results","div","Results_templateObject","StyledI","_ref","concat","Results_templateObject2","Result","_props$weather","weather","error","city","sunrise","sunset","temp","pressure","wind","date","Cart","Results_templateObject3","ResultsContainer","_templateObject4","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","HeroImg","HeroImage_templateObject","img","HeroImage","ldsRipple","keyframes","Loader_templateObject","LoaderOutside","Loader_templateObject2","LoaderInside","Loader_templateObject3","Loader","MyFooter","Footer_templateObject","Footer","src","logo","alt","Footer_templateObject2","Footer_templateObject3","class","href","APIKey","GlobalStyle","createGlobalStyle","App_templateObject","whiteColor","Header","h1","App_templateObject2","WeatherApp","App_templateObject3","App","state","isLoading","handleInputChange","e","_this","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","prevState","sys","main","speed","catch","Fragment","components_HeroImage","components_Form","this","afterLoading","components_Loader","components_Results","src_components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11f1566e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.76903e4b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.6c205a73.svg\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst MyForm = styled.form`\r\n  width: 55%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  & * {\r\n    font-size: 2em;\r\n  }\r\n  @media (max-width: 1024px) {\r\n    width: 80%;\r\n  }\r\n\r\n  @media (max-width: 480px) {\r\n    width: 90%;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: transparent;\r\n  border: 1px solid white;\r\n  border-radius: 3px;\r\n  color: white;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  margin-top: 20px;\r\n  width: 50%;\r\n  outline: none;\r\n  transition: 0.3s;\r\n  &:hover {\r\n    color: white;\r\n    background: rgba(255, 255, 255, 0.2);\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  border: none;\r\n  border-bottom: 2px solid rgba(255, 255, 255, 0.8);\r\n  background: transparent;\r\n  color: rgba(255, 255, 255, 0.8);\r\n  text-align: center;\r\n  width: 50%;\r\n  padding: 10px;\r\n  outline: none;\r\n  transition: 0.3s;\r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, 0.6);\r\n  }\r\n  &:focus {\r\n    box-shadow: 0 10px 20px -8px rgba(255, 255, 255, 0.8);\r\n  }\r\n`;\r\nconst Form = props => {\r\n  return (\r\n    <MyForm onSubmit={props.submit} className={props.className}>\r\n      <Input\r\n        type=\"text\"\r\n        value={props.value}\r\n        placeholder=\"Type your city\"\r\n        onChange={props.change}\r\n      />\r\n      <Button>Check the weather</Button>\r\n    </MyForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"../icons/css/weather-icons.min.css\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Results = styled.div`\r\n  font-size: 2em;\r\n  color: rgba(255, 255, 255, 0.8);\r\n  margin-top: 20px;\r\n  text-align: center;\r\n`;\r\n\r\nconst I = ({ className }) => <i className={`${className}`} />;\r\nconst StyledI = styled(I)`\r\n  font-size: 2em;\r\n  margin: 10px;\r\n  text-align: center;\r\n`;\r\n\r\nconst Result = props => {\r\n  const {\r\n    error,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    date\r\n  } = props.weather;\r\n\r\n  const Cart = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    text-align: center;\r\n    width: 33.333%;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n    &:hover {\r\n      color: white;\r\n    }\r\n    @media (max-width: 480px) {\r\n      width: 50%;\r\n    }\r\n  `;\r\n\r\n  const ResultsContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: stretch;\r\n    flex-wrap: wrap;\r\n    width: 80%;\r\n    height: 40vh;\r\n    margin: 50px auto;\r\n    transition: 0.3s;\r\n  `;\r\n\r\n  let content = null;\r\n  if (!error && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n    content = (\r\n      <div>\r\n        <h3>\r\n          Actual weather in <strong>{city}</strong>\r\n        </h3>\r\n        <ResultsContainer>\r\n          <Cart>\r\n            <StyledI className=\"wi wi-time-5\" />\r\n            <p>Date and time: {date}</p>\r\n          </Cart>\r\n          <Cart>\r\n            <StyledI className=\"wi wi-thermometer\" />\r\n            <p>Temperature: {temp} &#186;C</p>\r\n          </Cart>\r\n          <Cart>\r\n            <StyledI className=\"wi wi-barometer\" />\r\n            <p>Pressure: {pressure} hPa</p>\r\n          </Cart>\r\n          <Cart>\r\n            <StyledI className=\"wi wi-sunrise\" />\r\n            <p>Sunrise: {sunriseTime}</p>\r\n          </Cart>\r\n          <Cart>\r\n            <StyledI className=\"wi wi-horizon\" />\r\n            <p>Sunset: {sunsetTime}</p>\r\n          </Cart>\r\n          <Cart>\r\n            <StyledI className=\"wi wi-strong-wind\" />\r\n            <p>Wind speed: {wind} m/s</p>\r\n          </Cart>\r\n        </ResultsContainer>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Results>{error ? `There is no ${city} in our database` : content}</Results>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport img from \"../img/bg.jpg\";\r\n\r\nconst HeroImg = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  z-index: -1;\r\n  background-image: url(${img});\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.4);\r\n  }\r\n`;\r\nconst HeroImage = () => {\r\n  return <HeroImg />;\r\n};\r\n\r\nexport default HeroImage;\r\n","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst ldsRipple = keyframes`\r\n0% {\r\n  top: 28px;\r\n  left: 28px;\r\n  width: 0;\r\n  height: 0;\r\n  opacity: 1;\r\n}\r\n100% {\r\n  top: -1px;\r\n  left: -1px;\r\n  width: 58px;\r\n  height: 58px;\r\n  opacity: 0;\r\n}\r\n`;\r\nconst LoaderOutside = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 64px;\r\n  height: 64px;\r\n`;\r\n\r\nconst LoaderInside = styled.div`\r\n  position: absolute;\r\n  border: 4px solid #fff;\r\n  opacity: 1;\r\n  border-radius: 50%;\r\n  animation: ${ldsRipple} 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\r\n  &:nth-child(2) {\r\n    animation-delay: -0.5s;\r\n  }\r\n`;\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <LoaderOutside>\r\n      <LoaderInside />\r\n      <LoaderInside />\r\n    </LoaderOutside>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport logo from \"../svg/logo.svg\";\r\nimport \"./Footer.css\";\r\n\r\nconst MyFooter = styled.div`\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 50px;\r\n  color: rgba(255, 255, 255, 0.9);\r\n`;\r\n\r\nconst Logo = ({ src }) => <img src={`${logo}`} alt=\"logo\" />;\r\n\r\nconst MyLogo = styled(Logo)`\r\n  width: 100%;\r\n`;\r\n\r\nconst LogoWrapper = styled.div`\r\n  width: 10%;\r\n  padding-left: 3%;\r\n`;\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <MyFooter>\r\n      <h2>\r\n        Created with\r\n        <i class=\"fas fa-heart\" />\r\n        by Mateusz Dominiak\r\n        <a href=\"https://github.com/gitmatheo\">\r\n          <i class=\"fab fa-github\" />\r\n        </a>\r\n      </h2>\r\n      {/* <LogoWrapper>\r\n        <MyLogo />\r\n      </LogoWrapper> */}\r\n    </MyFooter>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport Results from \"./Results\";\nimport HeroImage from \"./HeroImage\";\nimport Loader from \"./Loader\";\nimport Footer from \"./Footer\";\nimport styled, { createGlobalStyle } from \"styled-components\";\n\n//API KEY\nconst APIKey = `098f9bf6c16084074659b3cfd6958052`;\n\n//Styles for styled components\nconst GlobalStyle = createGlobalStyle`\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n  body {\n    color: ${props => (props.whiteColor ? \"white\" : \"black\")};\n    font-family: 'Montserrat', sans-serif;\n    font-size: 12px;\n  }\n  @media (max-width: 768px) {\n  body {\n    font-size: 9px;\n  }\n}\n\n@media (max-width: 480px) {\n  body {\n    font-size: 7px;\n  }\n}\n`;\n\nconst Header = styled.h1`\n  font-size: 3.5em;\n  color: rgba(255, 255, 255, 0.8);\n`;\n\nconst WeatherApp = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n`;\n\n//APP\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    error: \"\",\n    isLoading: false\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  handleCitySubmit = e => {\n    e.preventDefault();\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${\n      this.state.value\n    }&APPID=${APIKey}&units=metric`;\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"Nie udało się\");\n      })\n      .then(\n        response => response.json(),\n        this.setState({\n          isLoading: true\n        })\n      )\n      .then(data => {\n        const time = new Date().toLocaleString();\n\n        this.setState(prevState => ({\n          error: false,\n          date: time,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          city: prevState.value,\n          isLoading: false,\n          value: \"\"\n        }));\n      })\n      .catch(error => {\n        this.setState(prevState => ({\n          error: true,\n          isLoading: false,\n          city: prevState.value\n        }));\n      });\n  };\n  render() {\n    return (\n      <>\n        <GlobalStyle />\n        <HeroImage />\n        <WeatherApp className=\"App\">\n          <Header>Simple React Weather App</Header>\n          <Form\n            value={this.state.value}\n            change={this.handleInputChange}\n            submit={this.handleCitySubmit}\n            className={this.state.afterLoading ? \"active\" : null}\n          />\n\n          {this.state.isLoading ? <Loader /> : <Results weather={this.state} />}\n          <Footer />\n        </WeatherApp>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}